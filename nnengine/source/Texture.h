#ifndef NNE_TEXTURE_H
#define NNE_TEXTURE_H

#include "PlatformSpecs.h"
#include "DebugUtilities.h"
#include "String.h"
#include "Vec2.hpp"

namespace NNE{

/*
	Texture class loads an image from disk to memory and 
	upload it to GPU then delete the copy on cpu memory.
*/
class Texture
{
public:
	
	// texture unit should always be 0 if GPU program only samples one texture in one draw call
	// the default value for a sampler in glsl is 0, therefore we don't need to 
	// specify the sampler if we only use one texture.
	Texture(Sid name, NNEuint i, GPUenum t)
		:m_name(name), m_unitId(i), m_id(0), m_type(t), m_widthHeight(0, 0)
	{
		GL_DEBUG(glActiveTexture(GL_TEXTURE0 + m_unitId));
		GL_DEBUG(glGenTextures(1, &m_id));
	}

	~Texture()
	{
		GL_DEBUG(glDeleteTextures(1, &m_id));
	}

	Sid getNameSid()
	{
		return m_name;
	}

	NNEbool load(const NNEchar *filename, NNEuint flag = 0);

	NNEbool load_cubemap(const NNEchar *x_pos_file,
						 const NNEchar *x_neg_file,
						 const NNEchar *y_pos_file,
						 const NNEchar *y_neg_file,
						 const NNEchar *z_pos_file,
						 const NNEchar *z_neg_file,
						 NNEuint flags);

	NNEvoid setMinMagFilter(GPUint minf, GPUint magf)
	{
		GL_DEBUG(glBindTexture(m_type, m_id));
		GL_DEBUG(glTexParameteri(m_type, GL_TEXTURE_MIN_FILTER, minf));
		GL_DEBUG(glTexParameteri(m_type, GL_TEXTURE_MAG_FILTER, magf));
	}

	// convert GPUenum to NNEuint
	NNEuint getUnitId()
	{
		return m_unitId - (NNEuint)GL_TEXTURE0;
	}

	NNEvoid bind()
	{
		GL_DEBUG(glActiveTexture(GL_TEXTURE0 + m_unitId));
		GL_DEBUG(glBindTexture(m_type, m_id));
	}

	NNEvoid unbind()
	{
		GL_DEBUG(glBindTexture(m_type, 0));
	}

private:

	NNEbool createTexture(NNEuchar *data, GLenum type,
		NNEint w, NNEint h, NNEint channels, NNEuint flag);

private:

	Sid m_name;

	// texture unit id
	NNEuint m_unitId;

	// texture index generated by OpenGL
	NNEuint m_id;

	// texture type
	GPUenum m_type;

	Vec2i m_widthHeight;

};

} // manespace NNE

#endif // NNE_TEXTURE_H